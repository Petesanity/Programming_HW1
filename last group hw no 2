package last_homework;

import java.util.*;
import java.util.concurrent.Semaphore;

public class TaHelp {
	private Random random= new Random();
	// declared the currently_helped value as null that means no student was getting helped
	//numberOfchair=1 that means only one student can get help at a time & other should wait
	//using semaphore when one being helped other can't disturb 
	private Student currently_helped= null;
	private int numberOfchair= 1;
	private int numberOfwaitingchair= 3;
	private Semaphore sem;
	private ArrayList<Student> student_is_waiting = new ArrayList<Student>();
	private Student [] array= new Student [3];
	private int size= student_is_waiting.size();
	public TaHelp(Semaphore sem) {
		this.student_is_waiting= student_is_waiting;
		this.sem= sem;
	}
	//here is showing if the ta is busy with someone then other student must wait until ta is done with first
	/*there should be list of waiting student. there is three chairs for waiting students if 3 of them are full 
	then rest student can go and come back later*/
	
	public void gettingHelp(Student s) throws InterruptedException {
		if( numberOfchair == 1)
			for(int i=0; i<size; i++) {
				student_is_waiting.add(i,s);
				
			if(i<3) {
					Student waitingonChair=array[i];
					}
			else {
				comeLater(s);
			}
			}
					
		}
	// shows the students who will come back later and return the value 
	
	public Student comeLater(Student e) {
	if(array.length<3) 
		student_is_waiting.add(e);
	return e;
		
		
	}
	// if ta is sleeping when there is no student who needs help and return a boolean value
   
	public boolean sleeping() {
		if(numberOfchair<1)
			 currently_helped= null;
		return true;
		
	}
	//if there is no student who needs help then ta is sleeping and a student come for help and wake up the ta
	void run() {
		try {
		if(sleeping()) {
			  currently_helped= array[0];
				   }
		}
	
		catch (Exception e) {
			 System.out.println("Queue IS Empty");
		}
	}
	/*this method shows a for loop where ta is helping one by one students who were waiting in 
	the line for being helped*/
	private void helpstudent() throws InterruptedException{
		for(int i=0; i<array.length; i++) {
		run();
		System.out.println("Ta is helping right now" + currently_helped);
		sem.acquire();
		int helping_time= random.nextInt(1000);
		System.out.println("TA is finished helping a student");
		sem.release();
	     Student call = array[i];
		}
	}


}


package last_homework;

public class Student {

}


package last_homework;

import java.util.concurrent.Semaphore;

public class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//TaHelp help= new TaHelp (5);

	}

}
