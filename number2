package last_groupwork;

import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.Semaphore;

public class TaProblem implements Runnable{
//instance variable
	private Semaphore Tawake= new Semaphore(0);
	private Semaphore numberOfchair= new Semaphore(3);
	private Semaphore TaAssist= new Semaphore(1);
	Random random= new Random();
	private Thread t;
//arraylist used then ever student comes the size of its increased
	
	
	private ArrayList<Student> student_is_waiting = new ArrayList<Student>();
	private int size= student_is_waiting.size();
	
	
	//using constructor to initialize the instance variable 
	public TaProblem () {
		this.Tawake= Tawake;
		this.numberOfchair= numberOfchair;
		this.TaAssist= TaAssist;
		t=Thread.currentThread();
		
	}
	
	//creating a tread for student who is going to get help(inner class)
	public class studentGettinghelp implements Runnable{
		
		void  help() {
		Thread t1= new Thread(studentGettinghelp(Tawake, numberOfchair, TaAssist));
		t1.start();
       }
		
		private Runnable studentGettinghelp(Semaphore Tawake, Semaphore numberOfchair, Semaphore TaAssist) {
		// TODO Auto-generated method stub
		return null;
	}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			
		}
		
	}
	
	
    // create a tread for ta(inner class)
	public class TaHelping implements Runnable{
		void tadoing() {
		Thread t2= new Thread(TaHelping (Tawake, numberOfchair, TaAssist));
		t2.start();
		}
		private Runnable TaHelping(Semaphore Tawake, Semaphore numberOfchair, Semaphore TaAssist) {
			return null;
		}
		@Override
		public void run() {
			// TODO Auto-generated method stub
			
		}
		
	}
	
//boolean method check the ta is busy or not if busy then return a boolean value
	private boolean busy= false;
	public boolean isBusy() {
		if(size<1)
			return true;
		else return busy;
		
	}
	public void studentwait() throws InterruptedException{
		if(isBusy()== true)
			wait();
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		/*check the ta is busy or not ,if not ta is woke up by a student, 
		if ta is busy with the student then next 3 students wait outside on the chair otherwise go and come back later,
        when there is no student again ta go to sleep*/
		while(true) {
			if(TaAssist.tryAcquire()) {
				try {
					 Tawake.tryAcquire();
					System.out.println("student who is getting assistance is" + student_is_waiting);
				}
			catch(Exception e) {
					continue;
				}
			}
			else if(numberOfchair.tryAcquire()) {
						try {
						TaAssist.acquire();
						System.out.println("student who is getting assistance is" + student_is_waiting);
						}
						catch(Exception e) {
							System.out.println("there is no chair is available in the hallway");
						}
						finally {
							TaAssist.release();
							numberOfchair.release();
							
						
		
				}
			}
			else {
				try {
					System.out.println("no student needs help so ta going to take a nap");
					Tawake.release();
					System.out.println("ta woke up to help a student");
					while(numberOfchair.availablePermits()!=3) {
						
					t.sleep(1000);
					numberOfchair.release();
					}
				}
				catch(Exception e) {
					continue;
				}
			}
			}
			
			
	}
	}

package last_groupwork;

import java.util.ArrayList;

public class Student {

	
	
}
package last_groupwork;

public class check {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    //running the contructor
		TaProblem c= new TaProblem();
		c.run();
		System.out.println(c);

	}

}
